{"version":3,"sources":["../../../src/graphql/resolvers/comments-resolvers.js"],"names":["create_post_comment","_","args","user","create","_id","comment","update","post","$inc","no_answers","Error","post_comments","cursor","limit","find","createdAt","$lt","upvote_post_comment","findOne","check","v","upvote_no","remove","message","value","downvote_post_comment","downvote_no"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe;AACb;AACAA;AAAA,wEAAqB,iBAAOC,CAAP,EAAUC,IAAV;AAAA,UAAkBC,IAAlB,QAAkBA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGX,uBAAYA,IAAZ,CAHW;;AAAA;AAAA;AAAA,qBAIK,sBAAYC,MAAZ,YAAqBD,MAAMA,KAAKE,GAAhC,IAAwCH,IAAxC,EAJL;;AAAA;AAIXI,qBAJW;;AAAA,mBAKbA,OALa;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAOT,eAAKC,MAAL,CAAY,EAAEF,KAAKC,QAAQE,IAAf,EAAZ,EAAmC,EAAEC,MAAM,EAAEC,YAAY,CAAC,CAAf,EAAR,EAAnC,CAPS;;AAAA;AAAA,+CAQRJ,OARQ;;AAAA;AAAA,oBAUX,IAAIK,KAAJ,CAAU,kBAAV,CAVW;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFa;AAiBb;AACAC;AAAA,wEAAe,kBAAOX,CAAP;AAAA,UAAYO,IAAZ,SAAYA,IAAZ;AAAA,UAAkBK,MAAlB,SAAkBA,MAAlB;AAAA,UAA0BC,KAA1B,SAA0BA,KAA1B;AAAA,UAAqCX,IAArC,SAAqCA,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGL,uBAAYA,IAAZ,CAHK;;AAAA;AAAA,mBAIRU,MAJQ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAKM,sBAAYE,IAAZ,CAAiB,EAAEP,MAAMA,IAAR,EAAcQ,WAAW,EAAEC,KAAKJ,MAAP,EAAzB,EAAjB,EAA6DC,KAA7D,CAAmEA,KAAnE,CALN;;AAAA;AAAA;;AAAA;AAAA;AAAA,qBAOE,sBAAYC,IAAZ,CAAiB,EAAEP,MAAMA,IAAR,EAAjB,EAAiCM,KAAjC,CAAuCA,KAAvC,CAPF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAlBa;AA8BbI;AAAA,wEAAqB,kBAAOjB,CAAP;AAAA,UAAYK,OAAZ,SAAYA,OAAZ;AAAA,UAAyBH,IAAzB,SAAyBA,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEX,uBAAYA,IAAZ,CAFW;;AAAA;AAAA;AAAA,qBAIC,wBAAkBgB,OAAlB,CAA0B;AAC1ChB,sBAAMA,KAAKE,GAD+B;AAE1CC,yBAASA;AAFiC,eAA1B,CAJD;;AAAA;AAIbc,mBAJa;AAQbC,eARa;;AAAA,kBASZD,KATY;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAWT,wBAAkBhB,MAAlB,CAAyB,EAAED,MAAMA,KAAKE,GAAb,EAAkBC,SAASA,OAA3B,EAAzB,CAXS;;AAAA;AAAA;AAAA,qBAYT,sBAAYC,MAAZ,CAAmB,EAAEF,KAAKC,OAAP,EAAnB,EAAqC,EAAEG,MAAM,EAAEa,WAAW,CAAC,CAAd,EAAR,EAArC,CAZS;;AAAA;AAafD,kBAAI,IAAJ;AAbe;AAAA;;AAAA;AAAA;AAAA,qBAgBT,wBAAkBE,MAAlB,CAAyB,EAAEpB,MAAMA,KAAKE,GAAb,EAAkBC,SAASA,OAA3B,EAAzB,CAhBS;;AAAA;AAAA;AAAA,qBAiBT,sBAAYC,MAAZ,CAAmB,EAAEF,KAAKC,OAAP,EAAnB,EAAqC,EAAEG,MAAM,EAAEa,WAAW,CAAC,CAAd,EAAR,EAArC,CAjBS;;AAAA;AAkBfD,kBAAI,KAAJ;;AAlBe;AAAA,gDAoBV,EAAEG,SAAS,SAAX,EAAsBC,OAAOJ,CAA7B,EApBU;;AAAA;AAAA;AAAA;AAAA,gDAsBV;AACLG,yBAAS,OADJ;AAELC,uBAAO;AAFF,eAtBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KA9Ba;AA0DbC;AAAA,yEAAuB,kBAAOzB,CAAP;AAAA,UAAYK,OAAZ,SAAYA,OAAZ;AAAA,UAAyBH,IAAzB,UAAyBA,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEb,uBAAYA,IAAZ,CAFa;;AAAA;AAAA;AAAA,qBAID,0BAAoBgB,OAApB,CAA4B,EAAEhB,MAAMA,KAAKE,GAAb,EAAkBC,SAASA,OAA3B,EAA5B,CAJC;;AAAA;AAIfc,mBAJe;AAKfC,eALe;;AAAA,kBAMdD,KANc;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAQX,0BAAoBhB,MAApB,CAA2B,EAAED,MAAMA,KAAKE,GAAb,EAAkBC,SAASA,OAA3B,EAA3B,CARW;;AAAA;AAAA;AAAA,qBASX,sBAAYC,MAAZ,CAAoB,EAAEF,KAAKC,OAAP,EAApB,EAAsC,EAAEG,MAAM,EAAEkB,aAAa,CAAC,CAAhB,EAAR,EAAtC,CATW;;AAAA;AAUjBN,kBAAI,IAAJ;AAViB;AAAA;;AAAA;AAAA;AAAA,qBAaX,0BAAoBE,MAApB,CAA2B,EAAEpB,MAAMA,KAAKE,GAAb,EAAkBC,SAASA,OAA3B,EAA3B,CAbW;;AAAA;AAAA;AAAA,qBAcX,sBAAYC,MAAZ,CAAoB,EAAEF,KAAKC,OAAP,EAApB,EAAsC,EAAEG,MAAM,EAAEkB,aAAa,CAAC,CAAhB,EAAR,EAAtC,CAdW;;AAAA;AAejBN,kBAAI,KAAJ;;AAfiB;AAAA,gDAiBZ,EAAEG,SAAS,SAAX,EAAsBC,OAAOJ,CAA7B,EAjBY;;AAAA;AAAA;AAAA;AAAA,gDAmBZ;AACLG,yBAAS,OADJ;AAELC,uBAAO;AAFF,eAnBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA1Da,C","file":"comments-resolvers.js","sourcesContent":["import Post from \"../../models/Posts/Post\";\r\nimport PostCommentUpvote from '../../models/Posts/CommentUpvote';\r\nimport PostCommentDownvote from '../../models/Posts/CommentDownvote';\r\nimport PostComment from '../../models/Posts/PostComment';\r\nimport { requireAuth } from '../../services/auth';\r\n\r\nexport default {\r\n  //Currently logged in user answering questions\r\n  create_post_comment: async (_, args, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      await requireAuth(user);\r\n      const comment = await PostComment.create({ user: user._id, ...args });\r\n      if (comment) {\r\n        //Increasing the number of counts of answers by 1\r\n        await Post.update({ _id: comment.post }, { $inc: { no_answers: +1 } });\r\n        return comment;\r\n      }\r\n      throw new Error(\"An error occured\");\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Getting the last 7 answers\r\n  post_comments: async (_, { post, cursor, limit }, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      await requireAuth(user);\r\n      if(cursor){\r\n          return await PostComment.find({ post: post, createdAt: { $lt: cursor } }).limit(limit);\r\n      }\r\n      return await PostComment.find({ post: post }).limit(limit);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  upvote_post_comment: async (_, { comment }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Checking if comment has been upvoted\r\n      let check = await PostCommentUpvote.findOne({\r\n        user: user._id,\r\n        comment: comment\r\n      });\r\n      let v;\r\n      if (!check) {\r\n        //Creating new comment upvote document\r\n        await PostCommentUpvote.create({ user: user._id, comment: comment });\r\n        await PostComment.update({ _id: comment }, { $inc: { upvote_no: +1 } });\r\n        v = true;\r\n      } else {\r\n        //If it exist, remove it\r\n        await PostCommentUpvote.remove({ user: user._id, comment: comment });\r\n        await PostComment.update({ _id: comment }, { $inc: { upvote_no: -1 } });\r\n        v = false;\r\n      }\r\n      return { message: \"success\", value: v };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  downvote_post_comment: async (_, { comment }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Checking if comment has been upvoted\r\n      let check = await PostCommentDownvote.findOne({ user: user._id, comment: comment });\r\n      let v;\r\n      if (!check) {\r\n        //Creating new comment upvote document\r\n        await PostCommentDownvote.create({ user: user._id, comment: comment });\r\n        await PostComment.update( { _id: comment }, { $inc: { downvote_no: +1 } });\r\n        v = true;\r\n      } else {\r\n        //If it exist, remove it\r\n        await PostCommentDownvote.remove({ user: user._id, comment: comment });\r\n        await PostComment.update( { _id: comment }, { $inc: { downvote_no: -1 } });\r\n        v = false;\r\n      }\r\n      return { message: \"success\", value: v };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  }\r\n};"]}