{"version":3,"sources":["../../../src/graphql/resolvers/courses-resolvers.js"],"names":["become_sumaryzer","_","args","user","userInfo","findOne","course_code","sumaryzer","create","_id","faculty","school","message","value","approve_sumaryzer","course","remove","decline_sumaryzer","list_of_sumaryzers","find","limit","sort","createdAt","courses","$or","$and","department","search_course"],"mappings":"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","file":"courses-resolvers.js","sourcesContent":["import { requireAuth } from \"../../services/auth\";\r\nimport Course from '../../models/Courses/Course';\r\nimport Sumaryzers from '../../models/Courses/Sumaryzer';\r\nimport CoursesAllowed from '../../models/Courses/CoursesAllowed';\r\nimport Sumaryzer from \"../../models/Courses/Sumaryzer\";\r\n\r\nexport default {\r\n    //Adding sumaryzer's application to list of pending sumaryzers\r\n    become_sumaryzer: async(_, args, { user }) => {\r\n        try {\r\n            let userInfo = await requireAuth(user);\r\n\r\n            //Checking to see if user has applied already\r\n            const sumaryzer = await Sumaryzers.findOne({ course_code:args.course_code, user:user });\r\n            if (!sumaryzer) {\r\n                //Adding to sumaryzers list if he hasn't applied for the specific course \r\n                await Sumaryzers.create({ user: user._id, ...args, faculty: userInfo.faculty, school: userInfo.school });\r\n            } \r\n            return {\r\n                message: \"success\",\r\n                value: true\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                message: \"error\",\r\n                value: false\r\n            }\r\n        }\r\n\r\n    },\r\n    //Approving sumaryzers application\r\n    approve_sumaryzer: async(_, args, { user }) => {\r\n        try {\r\n            let userInfo = await requireAuth(user);\r\n\r\n            //Checking to see if the course has been added to courses\r\n            const course = await Course.findOne({ course_code:args.course_code, user:user });\r\n            if (!course) {\r\n                //Creating course if course doesn't exist\r\n                await Course.create({ user: user._id, ...args, faculty: userInfo.faculty, school: userInfo.school });\r\n                //Removing application field from sumaryzers list\r\n                await Sumaryzer.remove({user:user._id, course_code:args.course_code});\r\n                //Adding course code to list of courses user is allowed to sumaryz\r\n                await CoursesAllowed.create({ user: user, course_code: args.course_code });\r\n            } \r\n            return {\r\n                message: \"success\",\r\n                value: true\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                message: \"error\",\r\n                value: false\r\n            }\r\n        }\r\n\r\n    },\r\n    //Approving sumaryzers application\r\n    decline_sumaryzer: async(_, args, { user }) => {\r\n        try {\r\n            //let userInfo = await requireAuth(user);\r\n\r\n            //Checking to see if the course has been added to courses\r\n            await Sumaryzers.remove({ course_code:args.course_code, user:user });\r\n            return {\r\n                message: \"success\",\r\n                value: true\r\n            }\r\n        } catch (error) {\r\n            return {\r\n                message: \"error\",\r\n                value: false\r\n            }\r\n        }\r\n    },\r\n    //Getting list of sumaryzers application\r\n    list_of_sumaryzers: async() => {\r\n        try{\r\n            return Sumaryzer.find({}).limit(20).sort({createdAt: -1});\r\n        } catch (error){\r\n            throw error;\r\n        }\r\n    },\r\n    //Getting list of courses by default before user search for courses\r\n    courses: async(_, args, { user }) => {\r\n        try {\r\n            let userInfo = await requireAuth(user);\r\n            //Getting list of courses based on users's department and faculty\r\n            return await Course.find({ $or: [{ $and: [{ school: userInfo.school, department: userInfo.department }] }, { faculty: userInfo.faculty }] }).limit(7);\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    },\r\n    //Searching for course code by user\r\n    search_course: async(_, { course_code }, { user }) => {\r\n        try {\r\n            let userInfo = await requireAuth(user);\r\n            return Course.findOne({ $and: [{ course_code: course_code, school: userInfo.school }] });\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n}"]}