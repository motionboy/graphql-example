{"version":3,"sources":["../../../src/graphql/resolvers/user_course_resolvers.js"],"names":["user_join_course","_","args","user","create","_id","userJoin","message","value","user_joined_courses","find","limit"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;kBAEe;AACX;AACAA;AAAA,4EAAkB,iBAAMC,CAAN,EAASC,IAAT;AAAA,gBAAiBC,IAAjB,QAAiBA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEJ,uBAAYA,IAAZ,CAFI;;AAAA;AAAA;AAAA,mCAGW,qBAAWC,MAAX,YAAoBD,MAAMA,KAAKE,GAA/B,IAAuCH,IAAvC,EAHX;;AAAA;AAGNI,oCAHM;;AAAA,iCAIPA,QAJO;AAAA;AAAA;AAAA;;AAAA,6DAKA;AACFC,yCAAQ,SADN;AAEFC,uCAAM;AAFJ,6BALA;;AAAA;AAAA,6DAUA;AACFD,yCAAQ,QADN;AAEFC,uCAAM;AAFJ,6BAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6DAgBJ;AACFD,yCAAQ,OADN;AAEFC,uCAAM;AAFJ,6BAhBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAlB;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAFW;AAwBX;AACAC;AAAA,4EAAqB,kBAAMR,CAAN,EAASC,IAAT;AAAA,gBAAiBC,IAAjB,SAAiBA,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEP,uBAAYA,IAAZ,CAFO;;AAAA;AAAA,8DAGN,qBAAWO,IAAX,CAAgB,EAAEP,MAAMA,KAAKE,GAAb,EAAhB,EAAoCM,KAApC,CAA0C,CAA1C,CAHM;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArB;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAzBW,C","file":"user_course_resolvers.js","sourcesContent":["import UserCourse from '../../models/Courses/UserCourse';\r\nimport { requireAuth } from '../../services/auth';\r\n\r\nexport default {\r\n    //Adding new course by user ... (Joining)\r\n    user_join_course: async(_, args, { user }) => {\r\n        try {\r\n            await requireAuth(user);\r\n            let userJoin = await UserCourse.create({ user: user._id, ...args });\r\n            if(userJoin){\r\n                return{\r\n                    message:\"success\",\r\n                    value:true\r\n                }\r\n            } else{\r\n                return{\r\n                    message:\"failed\",\r\n                    value:false\r\n                }\r\n            }\r\n        } catch (error) {\r\n            return{\r\n                message:\"error\",\r\n                value:false\r\n            }\r\n        }\r\n    },\r\n    //List of courses logged user has joined\r\n    user_joined_courses: async(_, args, { user }) => {\r\n        try {\r\n            await requireAuth(user);\r\n            return UserCourse.find({ user: user._id }).limit(7);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n}"]}