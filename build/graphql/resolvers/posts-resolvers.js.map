{"version":3,"sources":["../../../src/graphql/resolvers/posts-resolvers.js"],"names":["NEW_POST","POST_COMMENT_ADDED","create_post","_","content","sector","user","userInfo","create","_id","new_post","publish","posts","cursor","limit","undefined","find","sort","createdAt","my_posts","$lt","create_post_comment","args","comment","findByIdAndUpdate","post","$inc","no_answers","new","updated_post","POST_COMMENT_INCREASED","Error","post_comments","subscribe","asyncIterator","payload","variables","Boolean","post_comment_added","toString"],"mappings":"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","file":"posts-resolvers.js","sourcesContent":["import Post from '../../models/Posts/Post';\r\nimport PostComment from \"../../models/Posts/PostComment\";\r\nimport { requireAuth } from '../../services/auth';\r\nimport { pubsub } from '../../config/pubsub';\r\nimport User from '../../models/User';\r\nimport { withFilter } from 'graphql-subscriptions';\r\n\r\nconst NEW_POST = \"new_post\";\r\nconst POST_COMMENT_ADDED = \"post_comment_added\";\r\n\r\nexport default {\r\n  //Creating post by logge user\r\n  create_post: async (_, { content, sector }, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      let userInfo = await requireAuth(user);\r\n      //Creating new post\r\n      let new_post = await Post.create({ user: user._id, content: content, sector: sector });\r\n      //New post subscription\r\n      pubsub.publish(NEW_POST, {[NEW_POST]: new_post});\r\n      return new_post;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Getting posts in users department or faculty\r\n  posts: async (_, { cursor, limit }, { user }) => {\r\n    try {\r\n      //Authentication\r\n      let userInfo = await requireAuth(user);\r\n      if(cursor != undefined ){\r\n        return await Post.find({ sector: sector }).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      //If cursor is not provided\r\n      return await Post.find({ sector: sector }).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  my_posts: async (_, { cursor, limit }, { user }) => {\r\n    try {\r\n      //Authentication\r\n      let userInfo = await requireAuth(user);\r\n      if(cursor != undefined ){\r\n        return await Post.find({ user: user._id }, {createdAt: { $lt: cursor }}).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      return await Post.find({ user: user._id }).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Currently logged in user answering questions\r\n  create_post_comment: async (_, args, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      await requireAuth(user);\r\n      const comment = await PostComment.create({ user: user._id, ...args });\r\n      if (comment) {\r\n        //Increasing the number of counts of answers by 1\r\n        let updated_post = await Post.findByIdAndUpdate(comment.post, { $inc: { no_answers: + 1 } }, { new: true });\r\n        //Subscription for increase in number post comments\r\n        pubsub.publish(POST_COMMENT_INCREASED, { [POST_COMMENT_INCREASED]: updated_post });\r\n        //Subscription for new post comment\r\n        pubsub.publish(POST_COMMENT_ADDED, { [POST_COMMENT_ADDED]: comment });\r\n        return comment;\r\n      } else {\r\n        throw new Error(\"An error occured\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Getting the last 7 answers\r\n  post_comments: async (_, { post, cursor, limit }, { user }) => {\r\n    try {\r\n      //Validating user\r\n      await requireAuth(user);\r\n      if(cursor){\r\n        return await PostComment.find({ post: post, createdAt: { $lt: cursor } }).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      return await PostComment.find({ post: post }).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  /*******************************************************************\r\n   *******************************************************************\r\n    Subscriptions come here\r\n   *******************************************************************\r\n  ********************************************************************/\r\n  //Returns new post \r\n  new_post: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(NEW_POST), (payload, variables ) => {\r\n      return Boolean(payload.new_post.sector === variables.sector);\r\n    })\r\n  },\r\n  //Returns new post comment \r\n  post_comment_added: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_COMMENT_ADDED), (payload, variables) => {\r\n      return Boolean(toString(payload.post_comment_added.post) === toString(variables.post));\r\n    })\r\n  },\r\n};"]}