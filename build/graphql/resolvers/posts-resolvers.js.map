{"version":3,"sources":["../../../src/graphql/resolvers/posts-resolvers.js"],"names":["NEW_POST","POST_UPVOTE_UPDATED","POST_DOWNVOTE_UPDATED","POST_COMMENT_ADDED","POST_COMMENT_INCREASED","POST_COMMENT_UPVOTED","POST_COMMENT_DOWNVOTED","create_post","_","question","user","userInfo","create","_id","department","faculty","new_post","publish","console","log","JSON","stringify","posts","cursor","limit","undefined","find","$or","createdAt","$lt","sort","my_posts","upvote_post","post","findOne","status","v","updated_post_u","upvote_value","remove","findByIdAndUpdate","$inc","upvote_no","new","message","value","downvote_post","updated_post_d","downvote_value","downvote_no","create_post_comment","args","comment","no_answers","updated_post","Error","post_comments","upvote_post_comment","check","updated_post_comment_u","comment_upvote","downvote_post_comment","upvoted_post_comment_d","comment_downvote","subscribe","asyncIterator","payload","variables","b","Boolean","post_upvote_updated","post_downvote_updated","post_comment_added","toString","post_comment_increased","post_comment_upvoted","post_comment_downvoted"],"mappings":"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","file":"posts-resolvers.js","sourcesContent":["import Post from '../../models/Posts/Post';\r\nimport PostComment from \"../../models/Posts/PostComment\";\r\nimport Upvote from '../../models/Posts/Upvote';\r\nimport Downvote from \"../../models/Posts/Downvote\";\r\nimport Course from '../../models/Courses/Course';\r\nimport PostCommentUpvote from \"../../models/Posts/CommentUpvote\";\r\nimport PostCommentDownvote from \"../../models/Posts/CommentDownvote\";\r\nimport { requireAuth } from '../../services/auth';\r\nimport { pubsub } from '../../config/pubsub';\r\nimport User from '../../models/User';\r\nimport { withFilter } from 'graphql-subscriptions';\r\n\r\nconst NEW_POST = \"new_post\";\r\nconst POST_UPVOTE_UPDATED = \"post_upvote_updated\";\r\nconst POST_DOWNVOTE_UPDATED = \"post_downvote_updated\";\r\nconst POST_COMMENT_ADDED = \"post_comment_added\";\r\nconst POST_COMMENT_INCREASED = \"post_comment_increased\";\r\nconst POST_COMMENT_UPVOTED = \"post_comment_upvoted\";\r\nconst POST_COMMENT_DOWNVOTED = \"post_comment_downvoted\";\r\n\r\nexport default {\r\n  //Creating post by logge user\r\n  create_post: async (_, { question }, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      let userInfo = await requireAuth(user);\r\n      //Creating new post\r\n      let new_post = await Post.create({ user: user._id, question: question, department: userInfo.department, faculty: userInfo.faculty });\r\n      //New post subscription\r\n      pubsub.publish(NEW_POST, {[NEW_POST]: new_post});\r\n      console.log(\"********************\");\r\n      console.log(JSON.stringify(new_post));\r\n      return new_post;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Getting posts in users department or faculty\r\n  posts: async (_, { cursor, limit }, { user }) => {\r\n    try {\r\n      //Authentication\r\n      let userInfo = await requireAuth(user);\r\n      if(cursor != undefined ){\r\n        return await Post.find({$or: [{ department: userInfo.department }, { faculty: userInfo.faculty }], createdAt: { $lt: cursor }}).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      return await Post.find({$or: [{ department: userInfo.department }, { faculty: userInfo.faculty }]}).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  my_posts: async (_, { cursor, limit }, { user }) => {\r\n    try {\r\n      //Authentication\r\n      let userInfo = await requireAuth(user);\r\n      if(cursor != undefined ){\r\n        return await Post.find({ user: user._id }, {createdAt: { $lt: cursor }}).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      return await Post.find({ user: user._id }).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Upvoting post by logged user\r\n  upvote_post: async (_, { post }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Check if user has upvoted\r\n      const status = await Upvote.findOne({ user: user._id, post: post });\r\n      let v, updated_post_u, upvote_value;\r\n      if (!status) {\r\n        //Creating new upvote and updating summary\r\n        await Upvote.create({ user: user._id, post: post });\r\n        upvote_value = + 1;\r\n        v = true;\r\n      } else {\r\n        //Removing upvote if it exist\r\n        await Upvote.remove({ user: user._id, post: post });\r\n        upvote_value = - 1;\r\n        v = false;\r\n      }\r\n      //Updating post\r\n      updated_post_u = await Post.findByIdAndUpdate(post, { $inc: { upvote_no: upvote_value } }, { new: true });\r\n      //Subscription for increase in number of upvote\r\n      pubsub.publish(POST_UPVOTE_UPDATED, {[POST_UPVOTE_UPDATED]: updated_post_u });\r\n      return {\r\n        message: \"success\",\r\n        value: v\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: error,\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Downvoting post by log in user\r\n  downvote_post: async (_, { post }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Check if user has upvoted\r\n      const status = await Downvote.findOne({ user: user._id, post: post });\r\n      let v, updated_post_d, downvote_value;\r\n      if (!status) {\r\n        //If the user has not downvoted at all\r\n        await Downvote.create({ user: user._id, post: post });\r\n        downvote_value = + 1;\r\n        v = true;\r\n      } else {\r\n          //If user has already un-downvote and want to downvote again\r\n        await Downvote.remove({ user: user._id, post: post });\r\n        downvote_value = - 1;\r\n        v = false;\r\n      }\r\n      updated_post_d = await Post.findByIdAndUpdate(post, { $inc: { downvote_no: downvote_value } }, { new: true });\r\n      //Subscription for increase in the number of downvote\r\n      pubsub.publish(POST_DOWNVOTE_UPDATED, { [POST_DOWNVOTE_UPDATED]: updated_post_d });\r\n      return {\r\n        message: \"success\",\r\n        value: v\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Currently logged in user answering questions\r\n  create_post_comment: async (_, args, { user }) => {\r\n    try {\r\n      //Authenticating user\r\n      await requireAuth(user);\r\n      const comment = await PostComment.create({ user: user._id, ...args });\r\n      if (comment) {\r\n        //Increasing the number of counts of answers by 1\r\n        let updated_post = await Post.findByIdAndUpdate(comment.post, { $inc: { no_answers: + 1 } }, { new: true });\r\n        //Subscription for increase in number post comments\r\n        pubsub.publish(POST_COMMENT_INCREASED, { [POST_COMMENT_INCREASED]: updated_post });\r\n        //Subscription for new post comment\r\n        pubsub.publish(POST_COMMENT_ADDED, { [POST_COMMENT_ADDED]: comment });\r\n        return comment;\r\n      } else {\r\n        throw new Error(\"An error occured\");\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Getting the last 7 answers\r\n  post_comments: async (_, { post, cursor, limit }, { user }) => {\r\n    try {\r\n      //Validating user\r\n      await requireAuth(user);\r\n      if(cursor){\r\n        return await PostComment.find({ post: post, createdAt: { $lt: cursor } }).limit(limit).sort({ createdAt: - 1 });\r\n      }\r\n      return await PostComment.find({ post: post }).limit(limit).sort({ createdAt: - 1 });\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  upvote_post_comment: async (_, { comment }, { user }) => {\r\n      try{\r\n          await requireAuth(user);\r\n          //Checking if comment has been upvoted \r\n          let check = await PostCommentUpvote.findOne({ user: user._id, comment: comment});\r\n          let v, updated_post_comment_u, comment_upvote;\r\n          if(!check){\r\n              //Creating new comment upvote document\r\n              await PostCommentUpvote.create({ user: user._id, comment: comment });\r\n              comment_upvote = + 1;\r\n              v = true;\r\n          } else {\r\n               //If it exist, remove it\r\n                await PostCommentUpvote.remove({ user: user._id, comment: comment });\r\n                comment_upvote = - 1;\r\n                v = false;\r\n          }\r\n          updated_post_comment_u = await PostComment.findByIdAndUpdate(comment, {$inc: { upvote_no: comment_upvote }}, { new: true });\r\n          //Subscription for post comment upvoted\r\n          pubsub.publish(POST_COMMENT_UPVOTED, { [POST_COMMENT_UPVOTED]: updated_post_comment_u });\r\n          return { message: \"success\", value: v };\r\n      } catch(error){\r\n          return {\r\n              message: \"error\",\r\n              value: true\r\n          }\r\n      }\r\n  },\r\n  downvote_post_comment: async (_, { comment }, { user }) => {\r\n      try{\r\n          await requireAuth(user);\r\n          //Checking if comment has been upvoted \r\n          let check = await PostCommentDownvote.findOne({ user: user._id, comment: comment});\r\n          let v, upvoted_post_comment_d, comment_upvote;\r\n          if(!check){\r\n              //Creating new comment upvote document\r\n              await PostCommentDownvote.create({ user: user._id, comment: comment });\r\n              comment_downvote = + 1;\r\n              v = true;\r\n          } else {\r\n              //If it exist, remove it\r\n              await PostCommentDownvote.remove({ user: user._id, comment: comment });\r\n              comment_downvote = - 1;\r\n              v = false;\r\n          }\r\n          upvoted_post_comment_d = await PostComment.findByIdAndUpdate(comment, {$inc: { downvote_no: comment_downvote }}, { new: true });\r\n          //Subscription for post comment downvoted\r\n          pubsub.publish(POST_COMMENT_DOWNVOTED, { [POST_COMMENT_DOWNVOTED]: upvoted_post_comment_d });\r\n          return { message: \"success\", value: v };\r\n      } catch(error){\r\n          return {\r\n              message: \"error\",\r\n              value: true\r\n          }\r\n      }\r\n  },\r\n  /*******************************************************************\r\n   *******************************************************************\r\n    Subscriptions come here\r\n   *******************************************************************\r\n  ********************************************************************/\r\n  //Returns new post \r\n  new_post: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(NEW_POST), (payload, variables ) => {\r\n      let b = Boolean(payload.new_post.department === variables.department);\r\n      console.log(b);\r\n      console.log(payload.new_post.department);\r\n      console.log(variables.department);\r\n      return b\r\n    })\r\n  },\r\n  //Returns whole post with updated upvote number\r\n  post_upvote_updated: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_UPVOTE_UPDATED), (payload, variables) => {\r\n      return Boolean(payload.post_upvote_updated.department === variables.department);\r\n    })\r\n  },\r\n  //Returns whole Post with updated downvote number\r\n  post_downvote_updated: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_DOWNVOTE_UPDATED), (payload, variables) => {\r\n      return Boolean(payload.post_downvote_updated.department === variables.department);\r\n    })\r\n  },\r\n  //Returns new post comment \r\n  post_comment_added: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_COMMENT_ADDED), (payload, variables) => {\r\n      return Boolean(toString(payload.post_comment_added.post) === toString(variables.post));\r\n    })\r\n  },\r\n  //Returns posts with updated number\r\n  post_comment_increased: {\r\n    subscribe:withFilter(() => pubsub.asyncIterator(POST_COMMENT_INCREASED), (payload, variables) => {\r\n      return Boolean(toString(payload.post_comment_increased.department) === toString(variables.department));\r\n    })\r\n  },\r\n  //Returns post comment with updated upvote\r\n  post_comment_upvoted: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_COMMENT_UPVOTED), (payload, variables) => {\r\n      return Boolean(payload.post_comment_upvoted.department === variables.department);\r\n    })\r\n  },\r\n  //Returns post comment with updated downvoted\r\n  post_comment_downvoted: {\r\n    subscribe: withFilter(() => pubsub.asyncIterator(POST_COMMENT_DOWNVOTED), (payload, variables) => {\r\n      return Boolean(payload.post_comment_downvoted.department === variables.department);\r\n    })\r\n  }\r\n};"]}