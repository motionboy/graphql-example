{"version":3,"sources":["../../../src/graphql/resolvers/seach_resolvers.js"],"names":["Fuse","require","schools","Object","values","faculties","courses","get_schools","_","char","user","options","shouldSort","threshold","location","distance","maxPatternLength","minMatchCharLength","keys","console","log","length","fuse","result","search","get_faculties","get_courses"],"mappings":";;;;;;AAEA;;;;AAGA;;;;AAGA;;;;;;;;AARA,IAAIA,OAAOC,QAAQ,SAAR,CAAX;AACA;;AAEA,IAAIC,UAAUC,OAAOC,MAAP,mBAAd;AACA;;AAEA,IAAIC,YAAYF,OAAOC,MAAP,qBAAhB;AACA;;AAEA,IAAIE,UAAUH,OAAOC,MAAP,mBAAd;kBACe;AACb;AACAG;AAAA,4EAAa,iBAAOC,CAAP;AAAA,gBAAYC,IAAZ,QAAYA,IAAZ;AAAA,gBAAsBC,IAAtB,SAAsBA,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEL;AACIC,mCAHC,GAGS,EAAEC,YAAY,IAAd,EAAoBC,WAAW,GAA/B,EAAoCC,UAAU,CAA9C,EAAiDC,UAAU,GAA3D,EAAgEC,kBAAkB,EAAlF,EAAsFC,oBAAoB,CAA1G,EAA6GC,MAAM,CAAC,MAAD,EAAS,MAAT,CAAnH,EAHT;;AAILC,oCAAQC,GAAR,CAAYlB,QAAQmB,MAApB;AACIC,gCALC,GAKM,IAAItB,IAAJ,CAASE,OAAT,EAAkBS,OAAlB,CALN;AAMDY,kCANC,GAMQD,KAAKE,MAAL,CAAYf,IAAZ,CANR;AAAA,6DAOEc,MAPF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAFa;AAcb;AACAE;AAAA,4EAAe,kBAAOjB,CAAP;AAAA,gBAAYC,IAAZ,SAAYA,IAAZ;AAAA,gBAAsBC,IAAtB,SAAsBA,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEP;AACIC,mCAHG,GAGO,EAAEC,YAAY,IAAd,EAAoBC,WAAW,GAA/B,EAAoCC,UAAU,CAA9C,EAAiDC,UAAU,GAA3D,EAAgEC,kBAAkB,EAAlF,EAAsFC,oBAAoB,CAA1G,EAA6GC,MAAM,CAAC,MAAD,CAAnH,EAHP;;AAIPC,oCAAQC,GAAR,CAAYf,UAAUgB,MAAtB;AACIC,gCALG,GAKI,IAAItB,IAAJ,CAASK,SAAT,EAAoBM,OAApB,CALJ;AAMHY,kCANG,GAMMD,KAAKE,MAAL,CAAYf,IAAZ,CANN;AAAA,8DAOAc,MAPA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;;AAAA;AAAA,OAfa;AA2Bb;AACAG;AAAA,4EAAa,kBAAOlB,CAAP;AAAA,gBAAYC,IAAZ,SAAYA,IAAZ;AAAA,gBAAsBC,IAAtB,SAAsBA,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEL;AACIC,mCAHC,GAGS,EAAEC,YAAY,IAAd,EAAoBC,WAAW,GAA/B,EAAoCC,UAAU,CAA9C,EAAiDC,UAAU,GAA3D,EAAgEC,kBAAkB,EAAlF,EAAsFC,oBAAoB,CAA1G,EAA6GC,MAAM,CAAC,MAAD,CAAnH,EAHT;;AAILC,oCAAQC,GAAR,CAAYd,QAAQe,MAApB;AACIC,gCALC,GAKM,IAAItB,IAAJ,CAASM,OAAT,EAAkBK,OAAlB,CALN;AAMDY,kCANC,GAMQD,KAAKE,MAAL,CAAYf,IAAZ,CANR;AAAA,8DAOEc,MAPF;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5Ba,C","file":"seach_resolvers.js","sourcesContent":["var Fuse = require('fuse.js');\n//Importing list of schools\nimport school from '../../services/schools';\nvar schools = Object.values(school);\n//Importing list of faculties\nimport faculty from '../../services/faculties';\nvar faculties = Object.values(faculty);\n//Importing list of courses\nimport course from '../../services/courses';\nvar courses = Object.values(course);\nexport default {\n  //Seaching list of schools....\n  get_schools: async (_, { char }, { user }) => {\n    try {\n          //Options for search\n          let options = { shouldSort: true, threshold: 0.8, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [\"name\", \"code\"] };\n          console.log(schools.length);\n          let fuse = new Fuse(schools, options);\n          let result = fuse.search(char);\n          return result;\n        } catch (error) {\n      throw error;\n    }\n  },\n  //Searching the list of faculties\n  get_faculties: async (_, { char }, { user }) => {\n      try {\n          //Options for search\n          let options = { shouldSort: true, threshold: 0.8, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [\"name\"] };\n          console.log(faculties.length);\n          let fuse = new Fuse(faculties, options);\n          let result = fuse.search(char);\n          return result;\n      } catch (error){\n          throw error;\n      }\n  }, \n  //Searching the list of courses......\n  get_courses: async (_, { char }, { user }) => {\n      try {\n          //Options for search\n          let options = { shouldSort: true, threshold: 0.8, location: 0, distance: 100, maxPatternLength: 32, minMatchCharLength: 1, keys: [\"name\"] };\n          console.log(courses.length);\n          let fuse = new Fuse(courses, options);\n          let result = fuse.search(char);\n          return result;\n      } catch (error){\n          throw error;\n      }\n  }\n};"]}