{"version":3,"sources":["../../../src/graphql/resolvers/summaries-resolvers.js"],"names":["SUMMARY_ADDED","SUMMARY_COMMENT_INCREASED","NEW_SUMMARY_COMMENT","SUMMARY_UPVOTED","SUMMARY_DOWNVOTED","create_summary","_","args","user","findOne","_id","course","topic","check","message","value","create","summary","status","publish","summaries","find","report","sort","createdAt","limit","view_summary","userInfo","view_status","findById","select","content","sumContent","coin","update","report_summary","$set","m","un_report_summary","reported_summaries","create_summary_comment","comment","findByIdAndUpdate","$inc","no_comments","new","new_summary","summary_comments","upvote_summary","v","new_summary_upvote","upvote_no","remove","downvote_summary","new_summary_downvote","downvote_no","summary_added","subscribe","asyncIterator","new_summary_comment","summary_upvoted","summary_downvoted"],"mappings":"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","file":"summaries-resolvers.js","sourcesContent":["import Summary from '../../models/Summaries/Summary';\r\nimport Upvote from '../../models/Summaries/Upvote';\r\nimport Downvote from '../../models/Summaries/Downvote';\r\nimport SummaryComment from '../../models/Summaries/SummaryComment';\r\nimport SavedSummary from '../../models/Summaries/SavedSummary';\r\nimport SummaryStatus from '../../models/Summaries/UserSummaryStatus';\r\nimport { requireAuth } from '../../services/auth';\r\nimport User from '../../models/User';\r\nimport { pubsub } from '../../config/pubsub';\r\n//import { constants } from 'os';\r\n\r\nconst SUMMARY_ADDED = \"summary_added\";\r\nconst SUMMARY_COMMENT_INCREASED = \"summary_comment_increased\";\r\nconst NEW_SUMMARY_COMMENT = \"new_summary_comment\";\r\nconst SUMMARY_UPVOTED = \"summary_upvoted\";\r\nconst SUMMARY_DOWNVOTED = \"summary_downvoted\";\r\n\r\nexport default {\r\n  //Creating summary by summarizer\r\n  create_summary: async (_, args, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Checking if the exact summary has been created\r\n      let check = await Summary.findOne({ user: user._id, course: args.course, topic: args.topic });\r\n      if (check) {\r\n        return { message: \"success\", value: true };\r\n      } else {\r\n        //Creating summary by user\r\n        let summary = await Summary.create({ user: user._id, ...args });\r\n        //Creating upvote with a status of false for the summary\r\n        await Upvote.create({ summary: summary._id, user: user._id, status: false });\r\n        //Creating downvote with a status of (false) for the summary\r\n        await Downvote.create({ summary: summary._id, user: user._id, status: false });\r\n\r\n        //Subscription for new summary\r\n        pubsub.publish(SUMMARY_ADDED, { [SUMMARY_ADDED]: summary });\r\n        //Responding to user with success message\r\n        return { message: \"success\", value: true };\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //getting list of summaries for logged student base on course selected\r\n  summaries: async (_, { course }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      return await Summary.find({ course: course, report: false }).sort({ createdAt: -1 }).limit(7);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Viewing specific summary by logged user\r\n  view_summary: async (_, { summary }, { user }) => {\r\n    try {\r\n      let userInfo = await requireAuth(user);\r\n      //Checking if the user has already viewed the summary\r\n      let view_status = await SummaryStatus.findOne({ summary: summary, user: userInfo._id });\r\n      if (view_status) {\r\n        let sumContent = await Summary.findById(summary).select({ content: 1, _id: 0 });\r\n        return {\r\n          message: sumContent,\r\n          value: true\r\n        };\r\n      } else {\r\n        //Checkin to see if logged user coin is greater or equal to 2\r\n        if (userInfo.coin >= 2) {\r\n          let sumContent = await Summary.findById(summary).select({ content: 1, _id: 0 });\r\n          //Creating new document for user view status\r\n          await SummaryStatus.create({ user: user._id, summary: summary, view_status: true });\r\n          //reducing the log user coin after successful viewing\r\n          await User.update({ _id: userInfo._id }, { coin: userInfo.coin - 2 });\r\n          return {\r\n            message: sumContent,\r\n            value: true\r\n          };\r\n        } else {\r\n          //When user has no\r\n          return {\r\n            message: \"no_coin\",\r\n            value: false\r\n          };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Reporting specific sumamry by user reading it\r\n  report_summary: async (_, { summary }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Updating report status to true\r\n      let report = await Summary.update({ _id: summary }, { $set: { report: true } });\r\n      let m = \"failed\";\r\n      if (report) {\r\n        m = \"success\"\r\n      } \r\n      return {\r\n        message: m,\r\n        value: true\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Un-reeporting summary by admin\r\n  un_report_summary: async (_, { summary }, { user }) => {\r\n    try {\r\n      //await requireAuth(user);\r\n      await Summary.update({ _id: summary }, { $set: { report: false } });\r\n      return {\r\n        message: \"success\",\r\n        value: true\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: error,\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Getting reported summaries\r\n  reported_summaries: async (_, args, { user }) => {\r\n    try {\r\n      //await requireAuth(user);\r\n      return Summary.find({ report: true }).limit(10);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Creating comment by a user viewing a summary\r\n  create_summary_comment: async (_, { summary, comment }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Check if the exact comment exist\r\n      let check = await SummaryComment.findOne({  summary: summary, user: user._id, comment: comment });\r\n      if (!check) {\r\n        //Creating comment\r\n        await SummaryComment.create({ user: user._id, summary: summary, comment: comment });\r\n        //Increasing the number of comments by 1 for the summary\r\n        let new_summary = await Summary.findByIdAndUpdate({ _id: summary },{ $inc: { no_comments: + 1 } }, { new: true });\r\n        //Subscription for new comments added \r\n        pubsub.publish(NEW_SUMMARY_COMMENT, { [NEW_SUMMARY_COMMENT]: new_summary });\r\n      }\r\n      return {\r\n        message: \"success\",\r\n        value: true\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Getting list of summary comments\r\n  summary_comments: async (_, { summary }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Getting last 7 comments\r\n      return await SummaryComment.findOne({ summary: summary }).sort({ createdAt: -1 }).limit(7);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Upvoting summary by log in user\r\n  upvote_summary: async (_, { summary }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Check if user has upvoted\r\n      const status = await Upvote.findOne( { user: user._id, summary: summary });\r\n      let v, new_summary_upvote;\r\n      if (!status) {\r\n        //Creating new upvote and updating summary\r\n        await Upvote.create({ summary: summary, user: user._id });\r\n        new_summary_upvote = await Summary.findByIdAndUpdate(summary, { $inc: { upvote_no: + 1 } }, { new: true });\r\n        v = true;\r\n      } else {\r\n        //Removing upvote if it exist\r\n        await Upvote.remove( { user: user._id, summary: summary });\r\n        new_summary_upvote = await Summary.findByIdAndUpdate(summary, { $inc: { upvote_no: - 1 } }, { new: true });\r\n        v = false;\r\n      }\r\n      //Returning updated summary to subscribed user\r\n      pubsub.publish(SUMMARY_UPVOTED, { [SUMMARY_UPVOTED]: new_summary_upvote });\r\n      return {\r\n        message: \"success\",\r\n        value: v\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: error,\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  //Downvoting summary by log in user\r\n  downvote_summary: async (_, { summary }, { user }) => {\r\n    try {\r\n      await requireAuth(user);\r\n      //Check if user has upvoted\r\n      const status = await Downvote.findOne({ user: user._id, summary: summary });\r\n      let v, new_summary_downvote;\r\n      if (!status) {\r\n        //If the user has not downvoted at all\r\n        await Downvote.create({ summary: summary, user: user._id });\r\n        new_summary_downvote = await Summary.findByIdAndUpdate(summary, { $inc: { downvote_no: + 1 } }, { new: true });\r\n        v = true;\r\n      } else {\r\n        //If user has already un-downvote and want to downvote again\r\n        await Downvote.remove({ user: user._id, summary: summary });\r\n        new_summary_downvote = await Summary.findByIdAndUpdate(summary, { $inc: { downvote_no: - 1 } }, { new: true });\r\n        v = true;\r\n      }\r\n      //Returning the updated summary to users that has subscribed to this summary\r\n      pubsub.publish(SUMMARY_DOWNVOTED, { [SUMMARY_DOWNVOTED]: new_summary_downvote });\r\n      return {\r\n        message: \"success\",\r\n        value: v\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n    }\r\n  },\r\n  /*******************************************************************\r\n   *******************************************************************\r\n    Subscriptions come here\r\n   *******************************************************************\r\n  ********************************************************************/\r\n  //New summary Subscription\r\n  summary_added: {\r\n    //For new summary added\r\n    subscribe: () => pubsub.asyncIterator(SUMMARY_ADDED)\r\n  },\r\n  //Return new comment\r\n  new_summary_comment: {\r\n    //For new comment added\r\n    subscribe: () => pubsub.asyncIterator(NEW_SUMMARY_COMMENT)\r\n  },\r\n  //Return the whole summary with increase or decrease in the number upvote \r\n  summary_upvoted: {\r\n    //For increase in summary upvote\r\n    subscribe: () => pubsub.asyncIterator(SUMMARY_UPVOTED)\r\n  },\r\n  //Returns the whole summary with increase or decrease in the number of downvotes\r\n  summary_downvoted: {\r\n    //For increase in summary upvote\r\n    subscribe: () => pubsub.asyncIterator(SUMMARY_DOWNVOTED)\r\n  },\r\n};"]}