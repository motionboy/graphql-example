{"version":3,"sources":["../../../src/graphql/resolvers/users-resolvers.js"],"names":["create_account","_","phone","fname","lname","email","password","findOne","user","create","token","createToken","me","args"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBACe;AACb;AACAA;AAAA,wEAAgB,iBAAOC,CAAP;AAAA,UAAYC,KAAZ,QAAYA,KAAZ;AAAA,UAAmBC,KAAnB,QAAmBA,KAAnB;AAAA,UAA0BC,KAA1B,QAA0BA,KAA1B;AAAA,UAAiCC,KAAjC,QAAiCA,KAAjC;AAAA,UAAwCC,QAAxC,QAAwCA,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGK,eAAKC,OAAL,CAAa,EAAEL,OAAOA,KAAT,EAAb,CAHL;;AAAA;AAGRM,kBAHQ;;AAAA,kBAKRA,IALQ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMK,eAAKC,MAAL,CAAY,EAAEP,OAAOA,KAAT,EAAgBE,OAAOA,KAAvB,EAA8BD,OAAOA,KAArC,EAA4CE,OAAOA,KAAnD,EAA0DC,UAAUA,QAApE,EAAZ,CANL;;AAAA;AAMRE,kBANQ;;AAAA;AAAA,+CASL;AACHE,uBAAOF,KAAKG,WAAL;AADJ,eATK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFa;AAkBb;AACAC;AAAA,wEAAI,kBAAOX,CAAP,EAAUY,IAAV;AAAA,UAAkBL,IAAlB,SAAkBA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEa,uBAAYA,IAAZ,CAFb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAnBa,C","file":"users-resolvers.js","sourcesContent":["import User from '../../models/User';\r\nimport { requireAuth } from '../../services/auth';\r\nexport default {\r\n  //Updating new user name or un-verify user after successfully verification of phone\r\n  create_account: async (_, { phone, fname, lname, email, password }) => {\r\n    try {\r\n      //Checking if user exist\r\n      let user = await User.findOne({ phone: phone });\r\n      //If user doesn't exist\r\n      if(!user){\r\n          user = await User.create({ phone: phone, lname: lname, fname: fname, email: email, password: password });\r\n      } \r\n      //Creating token for user\r\n      return {\r\n          token: user.createToken()\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Returning current logged user\r\n  me: async (_, args, { user }) => {\r\n    try {\r\n      return await requireAuth(user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};"]}