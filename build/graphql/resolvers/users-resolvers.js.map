{"version":3,"sources":["../../../src/graphql/resolvers/users-resolvers.js"],"names":["create_account","_","phone","fname","lname","email","sector","password","findOne","user","create","token","createToken","login","Error","me","args"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;kBACe;AACb;AACAA;AAAA,wEAAgB,iBAAOC,CAAP;AAAA,UAAYC,KAAZ,QAAYA,KAAZ;AAAA,UAAmBC,KAAnB,QAAmBA,KAAnB;AAAA,UAA0BC,KAA1B,QAA0BA,KAA1B;AAAA,UAAiCC,KAAjC,QAAiCA,KAAjC;AAAA,UAAwCC,MAAxC,QAAwCA,MAAxC;AAAA,UAAgDC,QAAhD,QAAgDA,QAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGK,eAAKC,OAAL,CAAa,EAAEN,OAAOA,KAAT,EAAb,CAHL;;AAAA;AAGRO,kBAHQ;;AAAA,kBAKRA,IALQ;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAMK,eAAKC,MAAL,CAAY,EAAER,OAAOA,KAAT,EAAgBE,OAAOA,KAAvB,EAA8BD,OAAOA,KAArC,EAA4CE,OAAOA,KAAnD,EAAyDC,QAAQA,MAAjE,EAAyEC,UAAUA,QAAnF,EAAZ,CANL;;AAAA;AAMRE,kBANQ;;AAAA;AAAA,+CASL;AACHE,uBAAOF,KAAKG,WAAL;AADJ,eATK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAFa;AAkBb;AACAC;AAAA,wEAAO,kBAAOZ,CAAP;AAAA,UAAYC,KAAZ,SAAYA,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGc,eAAKM,OAAL,CAAa,EAAEN,OAAOA,KAAT,EAAb,CAHd;;AAAA;AAGCO,kBAHD;;AAAA,kBAKCA,IALD;AAAA;AAAA;AAAA;;AAAA,oBAMO,IAAIK,KAAJ,CAAU,gBAAV,CANP;;AAAA;AAAA,gDASI;AACHH,uBAAOF,KAAKG,WAAL;AADJ,eATJ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAnBa;AAmCb;AACAG;AAAA,wEAAI,kBAAOd,CAAP,EAAUe,IAAV;AAAA,UAAkBP,IAAlB,SAAkBA,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEa,uBAAYA,IAAZ,CAFb;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AApCa,C","file":"users-resolvers.js","sourcesContent":["import User from '../../models/User';\r\nimport { requireAuth } from '../../services/auth';\r\nexport default {\r\n  //Updating new user name or un-verify user after successfully verification of phone\r\n  create_account: async (_, { phone, fname, lname, email, sector, password }) => {\r\n    try {\r\n      //Checking if user exist\r\n      let user = await User.findOne({ phone: phone });\r\n      //If user doesn't exist\r\n      if(!user){\r\n          user = await User.create({ phone: phone, lname: lname, fname: fname, email: email,sector: sector, password: password });\r\n      } \r\n      //Creating token for user\r\n      return {\r\n          token: user.createToken()\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Login user with only phone number\r\n  login: async (_, { phone }) => {\r\n    try {\r\n      //Checking if user exist\r\n      let user = await User.findOne({ phone: phone });\r\n      //If user doesn't exist\r\n      if(!user){\r\n          throw new Error(\"Create account\")\r\n      } \r\n      //Creating token for user if they exist\r\n      return {\r\n          token: user.createToken()\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Returning current logged user information\r\n  me: async (_, args, { user }) => {\r\n    try {\r\n      return await requireAuth(user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n};"]}