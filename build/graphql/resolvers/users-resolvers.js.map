{"version":3,"sources":["../../../src/graphql/resolvers/users-resolvers.js"],"names":["phone_check","_","phone","findOne","school","_id","user","msg","v","message","value","update_name","fname","lname","create","token","createToken","update_account","faculty","department","level","dob","update","$set","userUpdate","me","args","add_coin","userId","number","ref_code","coin","no_coin","submit_suggestion","suggestion_type","content","check","user_suggestions","find","limit"],"mappings":"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","file":"users-resolvers.js","sourcesContent":["import User from '../../models/User';\r\nimport Feedback from '../../models/Feedback'\r\nimport { requireAuth } from '../../services/auth';\r\nimport { NewCoin } from \"../../models/NewCoin\";\r\nexport default {\r\n  //Checking user phone number if it exist in database\r\n  phone_check: async (_, { phone }) => {\r\n    try {\r\n      //Checking if phone number exist\r\n      const user = await User.findOne({ phone: phone }, { school: 1, _id: 0 });\r\n      //If user phone number exist\r\n      let msg = 'new_user', v = true;\r\n      if (user) {\r\n        //Checking if the school exist\r\n        if(user.school){\r\n          msg = 'profile_completed';\r\n          v = true\r\n        } else {\r\n          msg = \"profile_incomplete\";\r\n          v = true\r\n        }\r\n      } \r\n      return {\r\n        message: msg,\r\n        value: v\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: true\r\n      };\r\n      //throw error;\r\n    }\r\n  },\r\n  //Updating new user name or un-verify user after successfully verification of phone\r\n  update_name: async (_, { phone, fname, lname }) => {\r\n    try {\r\n      //Checking if user exist\r\n      let user = await User.findOne({ phone: phone });\r\n      //If user doesn't exist\r\n      if(!user){\r\n          user = await User.create({ phone: phone, lname: lname, fname: fname });\r\n      } \r\n      //Creating token for user\r\n      return {\r\n          token: user.createToken()\r\n      }\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //Updating full account details on successful login\r\n  update_account: async (_, { school, faculty, department, level, dob }, { user }) => {\r\n    try {\r\n      //authenticating user\r\n      await requireAuth(user);\r\n      const userUpdate = await User.update( { _id: user._id }, { $set: { school: school, faculty: faculty, department: department, dob: dob, level: level } } );\r\n      if (userUpdate) {\r\n        return {\r\n          message: \"success\",\r\n          value: true\r\n        }\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: false\r\n      };\r\n    }\r\n  },\r\n  //Returning current logged user\r\n  me: async (_, args, { user }) => {\r\n    try {\r\n      return await requireAuth(user);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n  //For admin use only\r\n  add_coin: async (_, { userId, number, ref_code }, { user }) => {\r\n    try {\r\n      await User.update({ _id: userId }, { coin: number });\r\n      await NewCoin.create({ user: userId, no_coin: number, ref_code: ref_code })\r\n      return {\r\n        message: \"success\",\r\n        value: true\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        message: \"error\",\r\n        value: false\r\n      };\r\n    }\r\n  },\r\n  submit_suggestion: async (_, { suggestion_type, content }, { user }) => {\r\n      try{\r\n          await requireAuth(user);\r\n          const check = await Feedback.findOne({ user:user._id, suggestion_type: suggestion_type, content:content });\r\n          if(!check){\r\n              await Feedback.create({ user:user._id, suggestion_type:suggestion_type, content:content });\r\n          }\r\n          return { \r\n              message: \"success\", \r\n              value: true \r\n          };\r\n      } catch(error){\r\n        return { \r\n            message: \"error\", \r\n            value: true \r\n        };\r\n      }\r\n  },\r\n  user_suggestions: async(_, args, { user }) => {\r\n      try {\r\n          //await requireAuth(user);\r\n          return await Feedback.find({}).limit(20);\r\n      } catch (error){\r\n          throw error\r\n      }\r\n  }\r\n};"]}