{"version":3,"sources":["../../src/models/User.js"],"names":["UserSchema","fname","String","lname","phone","type","unique","password","sector","email","collection","plugin","pre","next","isModified","_hashPassword","methods","createToken","sign","_id","JWT_SECRET","verifyPass","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AACA,IAAMA,aAAa,qBAAW;AAC1BC,WAAOC,MADmB;AAE1BC,WAAOD,MAFmB;AAG1BE,WAAO;AACHC,cAAMH,MADH;AAEHI,gBAAQ;AAFL,KAHmB;AAO1BC,cAAUL,MAPgB;AAQ1BM,YAAQ;AACJH,cAAMH;AADF,KARkB;AAW1BO,WAAOP;AAXmB,CAAX,EAYhB,EAAEQ,YAAY,OAAd,EAZgB,CAAnB;AAaA;AACAV,WAAWW,MAAX;AACA;AACAX,WAAWY,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAClC,QAAI,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAiC;AAC7B,aAAKP,QAAL,GAAgB,KAAKQ,aAAL,CAAmB,KAAKR,QAAxB,CAAhB;AACA,eAAOM,MAAP;AACH;AACD,WAAOA,MAAP;AACH,CAND;;AAQAb,WAAWgB,OAAX,GAAqB;AACjBC,eADiB,yBACH;AACV,eAAO,uBAAIC,IAAJ,CAAS;AACRC,iBAAK,KAAKA;AADF,SAAT,EAGH,oBAAUC,UAHP,CAAP;AAKH,KAPgB;AAQjBL,iBARiB,yBAQHR,QARG,EAQO;AACpB,eAAO,4BAASA,QAAT,CAAP;AACH,KAVgB;;AAWjB;AACAc,cAZiB,sBAYNd,QAZM,EAYI;AACjB,eAAO,+BAAYA,QAAZ,EAAsB,KAAKA,QAA3B,CAAP;AACH;AAdgB,CAArB;kBAiBe,mBAASe,KAAT,CAAe,MAAf,EAAuBtB,UAAvB,C","file":"User.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport timestamps from 'mongoose-timestamp';\r\nimport { hashSync, compareSync } from 'bcrypt-nodejs';\r\nimport jwt from 'jsonwebtoken';\r\nimport constants from '../config/constants';\r\nconst UserSchema = new Schema({\r\n    fname: String,\r\n    lname: String,\r\n    phone: {\r\n        type: String,\r\n        unique: true\r\n    },\r\n    password: String,\r\n    sector: {\r\n        type: String\r\n    },\r\n    email: String,\r\n}, { collection: 'users' });\r\n//Adding timestamps to each user created\r\nUserSchema.plugin(timestamps);\r\n//Creating user model methods \r\nUserSchema.pre('save', function(next) {\r\n    if (this.isModified('password')) {\r\n        this.password = this._hashPassword(this.password);\r\n        return next();\r\n    }\r\n    return next();\r\n});\r\n\r\nUserSchema.methods = {\r\n    createToken() {\r\n        return jwt.sign({\r\n                _id: this._id\r\n            },\r\n            constants.JWT_SECRET\r\n        )\r\n    },\r\n    _hashPassword(password) {\r\n        return hashSync(password);\r\n    },\r\n    //Only applicable if we choose to use password\r\n    verifyPass(password) {\r\n        return compareSync(password, this.password);\r\n    },\r\n    \r\n}\r\nexport default mongoose.model('User', UserSchema);"]}