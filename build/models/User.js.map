{"version":3,"sources":["../../src/models/User.js"],"names":["UserSchema","fname","String","lname","phone","type","unique","password","coin","Number","default","status","Boolean","no_posts","school","level","faculty","department","course_study","email","avatar","dob","Date","collection","plugin","methods","createToken","sign","_id","JWT_SECRET","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AACA,IAAMA,aAAa,qBAAW;AAC1BC,WAAOC,MADmB;AAE1BC,WAAOD,MAFmB;AAG1BE,WAAO;AACHC,cAAMH,MADH;AAEHI,gBAAQ;AAFL,KAHmB;AAO1BC,cAAUL,MAPgB;AAQ1BM,UAAM;AACFH,cAAMI,MADJ;AAEFC,iBAAS;AAFP,KARoB;AAY1BC,YAAQ;AACJN,cAAMO,OADF;AAEJF,iBAAS;AAFL,KAZkB;AAgB1BG,cAAU;AACNR,cAAMI,MADA;AAENC,iBAAS;AAFH,KAhBgB;AAoB1BI,YAAQZ,MApBkB;AAqB1Ba,WAAON,MArBmB;AAsB1BO,aAAS;AACLX,cAAMH;AADD,KAtBiB;AAyB1Be,gBAAY;AACRZ,cAAMH;AADE,KAzBc;AA4B1BgB,kBAAchB,MA5BY;AA6B1BiB,WAAOjB,MA7BmB;AA8B1BkB,YAAQlB,MA9BkB;AA+B1BmB,SAAKC;AA/BqB,CAAX,EAgChB,EAAEC,YAAY,OAAd,EAhCgB,CAAnB;AAiCA;AACAvB,WAAWwB,MAAX;AACA;AACA;;;;;;;;AAQAxB,WAAWyB,OAAX,GAAqB;AACjBC,eADiB,yBACH;AACV,eAAO,uBAAIC,IAAJ,CAAS;AACRC,iBAAK,KAAKA;AADF,SAAT,EAGH,oBAAUC,UAHP,CAAP;AAKH;AAPgB,CAArB;kBAiBe,mBAASC,KAAT,CAAe,MAAf,EAAuB9B,UAAvB,C","file":"User.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\nimport timestamps from 'mongoose-timestamp';\r\nimport { hashSync, compareSync } from 'bcrypt-nodejs';\r\nimport jwt from 'jsonwebtoken';\r\nimport constants from '../config/constants';\r\nconst UserSchema = new Schema({\r\n    fname: String,\r\n    lname: String,\r\n    phone: {\r\n        type: String,\r\n        unique: true\r\n    },\r\n    password: String,\r\n    coin: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n    status: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    no_posts: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n    school: String,\r\n    level: Number,\r\n    faculty: {\r\n        type: String\r\n    },\r\n    department: {\r\n        type: String\r\n    },\r\n    course_study: String,\r\n    email: String,\r\n    avatar: String,\r\n    dob: Date\r\n}, { collection: 'users' });\r\n//Adding timestamps to each user created\r\nUserSchema.plugin(timestamps);\r\n//Creating user model methods \r\n/*UserSchema.pre('save', function(next) {\r\n    if (this.isModified('password')) {\r\n        this.password = this._hashPassword(this.password);\r\n        return next();\r\n    }\r\n    return next();\r\n});*/\r\n\r\nUserSchema.methods = {\r\n    createToken() {\r\n        return jwt.sign({\r\n                _id: this._id\r\n            },\r\n            constants.JWT_SECRET\r\n        )\r\n    },\r\n    /*_hashPassword(password) {\r\n        return hashSync(password);\r\n    },\r\n    //Only applicable if we choose to use password\r\n    verifyPass(password) {\r\n        return compareSync(password, this.password);\r\n    },*/\r\n    \r\n}\r\nexport default mongoose.model('User', UserSchema);"]}