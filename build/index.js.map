{"version":3,"sources":["../src/index.js"],"names":["require","app","use","endpointURL","GRAPHQL_PATH","subscriptionsEndpoint","PORT","SUBSCRIPTIONS_PATH","schema","typeDefs","resolvers","context","user","req","graphQLServer","listen","err","console","log","execute","subscribe","server","path"],"mappings":";;AAEA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAbAA,QAAQ,qBAAR;AACAA,QAAQ,gBAAR;;AAaA,IAAMC,MAAM,wBAAZ;AACA,2BAAYA,GAAZ;AACAA,IAAIC,GAAJ,CACE,WADF,EAEE,0CAAgB;AACdC,eAAa,oBAAUC,YADT;AAEdC,6CAAyC,oBAAUC,IAAnD,GACE,oBAAUC;AAHE,CAAhB,CAFF;;AAUA,IAAMC,SAAS,wCAAqB;AAClCC,4BADkC;AAElCC;AAFkC,CAArB,CAAf;;AAKAT,IAAIC,GAAJ,CACE,oBAAUE,YADZ,EAEE,yCAAe;AAAA,SAAQ;AACrBI,kBADqB;AAErBG,aAAS;AACPC,YAAMC,IAAID;AADH;AAFY,GAAR;AAAA,CAAf,CAFF;;AAUA,IAAME,gBAAgB,wBAAab,GAAb,CAAtB;AACA;AACAa,cAAcC,MAAd,CAAqB,oBAAUT,IAA/B,EAAqC,eAAO;AACxC,MAAIU,GAAJ,EAAS;AACLC,YAAQC,GAAR,CAAYF,GAAZ;AACH,GAFD,MAEO;AACH;AACA,qDAAuB;AACnBR,oBADmB;AAEnBW,+BAFmB;AAGnBC;AAHmB,KAAvB,EAIG;AACCC,cAAQP,aADT;AAECQ,YAAM,oBAAUf;AAFjB,KAJH;AAQAU,YAAQC,GAAR,wBAAiC,oBAAUZ,IAA3C;AACH;AACJ,CAfD;AAgBA","file":"index.js","sourcesContent":["require(\"babel-core/register\");\r\nrequire(\"babel-polyfill\");\r\nimport express from 'express';\r\nimport { createServer } from 'http';\r\nimport { graphqlExpress, graphiqlExpress } from \"apollo-server-express\";\r\nimport { makeExecutableSchema } from 'graphql-tools';\r\nimport { SubscriptionServer } from 'subscriptions-transport-ws';\r\nimport { execute, subscribe } from 'graphql';\r\n \r\nimport './config/db';\r\nimport typeDefs from \"./graphql/schema\";\r\nimport resolvers from \"./graphql/resolvers\";\r\nimport constants from './config/constants';\r\nimport middlewares from './config/middlewares';\r\nconst app = express();\r\nmiddlewares(app);\r\napp.use(\r\n  \"/graphiql\",\r\n  graphiqlExpress({\r\n    endpointURL: constants.GRAPHQL_PATH,\r\n    subscriptionsEndpoint: `ws://127.0.0.1:${constants.PORT}${\r\n      constants.SUBSCRIPTIONS_PATH\r\n    }`\r\n  })\r\n);\r\n\r\nconst schema = makeExecutableSchema({\r\n  typeDefs,\r\n  resolvers\r\n});\r\n\r\napp.use(\r\n  constants.GRAPHQL_PATH,\r\n  graphqlExpress(req => ({\r\n    schema,\r\n    context: {\r\n      user: req.user\r\n    }\r\n  }))\r\n);\r\n\r\nconst graphQLServer = createServer(app);\r\n//mocks().then(() => {\r\ngraphQLServer.listen(constants.PORT, err => {\r\n    if (err) {\r\n        console.log(err)\r\n    } else {\r\n        //Creating subscription server\r\n        new SubscriptionServer({\r\n            schema,\r\n            execute,\r\n            subscribe\r\n        }, {\r\n            server: graphQLServer,\r\n            path: constants.SUBSCRIPTIONS_PATH\r\n        })\r\n        console.log(`Server running on ${constants.PORT}`)\r\n    }\r\n});\r\n//});"]}