{"version":3,"sources":["../../src/config/middlewares.js"],"names":["req","res","next","token","headers","authorization","user","auth","app","use","json"],"mappings":";;;;;;AAIA;;uEACA,iBAAoBA,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEQ;AACMC,6BAHd,GAGsBH,IAAII,OAAJ,CAAYC,aAHlC;;AAAA,8BAIYF,SAAS,IAJrB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAM+B,uBAAYA,KAAZ,CAN/B;;AAAA;AAMkBG,4BANlB;;AAOYN,4BAAIM,IAAJ,GAAWA,IAAX;AAPZ;AAAA;;AAAA;AASYN,4BAAIM,IAAJ,GAAW,IAAX;;AATZ;AAAA,yDAWeJ,MAXf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeK,I;;;;;AALf;;;;AAEA;;;;;AADA;;;kBAqBe,eAAO;AAClBC,QAAIC,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAF,QAAIC,GAAJ,CAAQF,IAAR;AACH,C","file":"middlewares.js","sourcesContent":["import bodyParser from 'body-parser';\r\n//import constants from './constants';\r\nimport { decodeToken } from '../services/auth';\r\n\r\n//Getting jwt from user's request headers\r\nasync function auth(req, res, next) {\r\n    try {\r\n        //Making sure headers is not null or undefined\r\n        const token = req.headers.authorization;\r\n        if (token != null) {\r\n            //Passing the headers for validation and verification   \r\n            const user = await decodeToken(token);\r\n            req.user = user;\r\n        } else {\r\n            req.user = null;\r\n        }\r\n        return next();\r\n    } catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport default app => {\r\n    app.use(bodyParser.json());\r\n    app.use(auth);\r\n}"]}